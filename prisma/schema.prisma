generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model NoteDetails {
  id Int @id @default(autoincrement())
  title String 
  link String
  description String?
}

model Note {
  id Int @id @default(autoincrement())
  title String
  text String
}

model Code {
  id Int @id @default(autoincrement())
  title String
  code String
}

model ResourceDetails {
  id Int @id @default(autoincrement())
  name String 
  link String?
}
 
model ProblemDetails {
  id    Int    @id @default(autoincrement())
  author User?   @relation(fields: [authorId], references: [id])
  authorId  String?
  name String 
  platform String
  link String
  difficulty String?
  category String? 
  solved Boolean?
}
 
model PortfolioDetails {
  id    Int    @id @default(autoincrement())
  name String 
  image String?
  link String
  technologies String
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  problems      ProblemDetails[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

